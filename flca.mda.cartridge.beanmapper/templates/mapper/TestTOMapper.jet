<%@ jet package="cartridge" 
imports="java.util.* flca.mda.api.util.* mda.template.* mda.template.type.* flca.mda.codegen.data.* "
package="mapper"
class="TestTOMapper" %>
<%@ include file="../include/java-class-init.jetinc" %>
<%@ include file="../include/java-class-start.jetinc" %>
<% Class toClass = cc; %>
<% String toClassname = toClass.getSimpleName(); %>
<% Class entityClass = (Class) args[1]; %>
<% String entityClassname = entityClass.getSimpleName(); %>
<% List<Fw> toFws = tu.getFields(toClass, EXC, FwSelectType.ID); %>
<% List<Fw> entityFws = tu.getFields(entityClass, EXC, FwSelectType.ID); %>
<% String toUncapname = nu.uncapName(toClassname); %>
<% String entityUncapname = nu.uncapName(entityClassname); %>
<% String mapper = toClassname + "Mapper"; //tplu.getClassName(TidBeanMapper.BEANMAPPER_TO.name()); %>
<% impu.addImport(toClass);%>
<% impu.addImport(entityClass);%>
<% impu.addImport("org.junit.Test"); %>
<% impu.addImport("java.util.HashSet"); %>
<% impu.addImport("java.util.Set"); %>
<% impu.addImport("nl.apg.util.mapper.AbstractTestBeanMapper"); %>
<% impu.addImport("flca.xlsx.util.XlsxDataWriter");  %>
<% impu.addImport("flca.xlsx.util.Xlsx");  %>

public class <%=classname%> extends AbstractTestBeanMapper {

	private static final byte SHEET1 = 0;

	/*
	* Run this test once than move the generated excel files to src/test/resource and fill with testdata
	*/
	@Test 
	public void makeExcelTemplates() {
		XlsxDataWriter.writeAllXlsxFile("/tmp/<%=entityClassname%>.xlsx", <%=entityClassname%>.class);
		XlsxDataWriter.writeAllXlsxFile("/tmp/<%=toClassname%>.xlsx", <%=toClassname%>.class);
	}
		
	@Override
	protected Set<String> ignoreMapToEntityProperties() {
		Set<String> result = new HashSet<>();
		return result;
	}

	@Override
	protected Set<String> ignoreMapFromEntityProperties() {
		Set<String> result = new HashSet<>();
		return result;
	}


	@Test
	public void testMapToEntity() {
		Xlsx xls = new Xlsx("/<%=entityClassname%>.xlsx");
		for (Integer nr : xls.getAllNrs(<%=entityClassname%>.class, SHEET1)) {
			<%=entityClassname%> <%=entityUncapname%>1 = (<%=entityClassname%>) xls.make(<%=entityClassname%>.class, SHEET1, nr);
			<%=toClassname%> <%=toUncapname%> = <%=mapper%>.mapFromEntity(<%=entityUncapname%>1);
			<%=entityClassname%> <%=entityUncapname%>2 = <%=mapper%>.mapToEntity(<%=toUncapname%>);
			testEquals(<%=entityUncapname%>1, <%=entityUncapname%>2, ignoreMapToEntityProperties());
		}
	}

	@Test
	public void testMapFromEntity() {
		Xlsx xls = new Xlsx("/<%=toClassname%>.xlsx");
		for (Integer nr : xls.getAllNrs(<%=toClassname%>.class, SHEET1)) {
			<%=toClassname%> <%=toUncapname%>1 = (<%=toClassname%>) xls.make(<%=toClassname%>.class, SHEET1, nr);
			<%=entityClassname%> <%=entityUncapname%>1 = <%=mapper%>.mapToEntity(<%=toUncapname%>1);
			<%=toClassname%> <%=toUncapname%>2 = <%=mapper%>.mapFromEntity(<%=entityUncapname%>1);
			testEquals(<%=toUncapname%>1, <%=toUncapname%>2, ignoreMapFromEntityProperties());
		}
	}

	
}
<% importStringBuffer.insert(importInsertionPoint,  impu.computeSortedImports());%>
